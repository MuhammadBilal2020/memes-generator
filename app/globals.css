@tailwind base;
@tailwind components;
@tailwind utilities;

/* "use client"; // Necessary if using hooks or state in Next.js 13+

import Image from 'next/image';
import React, { useRef, useState } from 'react'; */
/* 
function MemePage(props: { searchParams: { id: string; url: string; box_count: number } }) {
  const { id, url, box_count } = props.searchParams;

  const text1 = useRef<HTMLInputElement>(null);
  const text2 = useRef<HTMLInputElement>(null);
  const text3 = useRef<HTMLInputElement>(null);
  const text4 = useRef<HTMLInputElement>(null);
  const text5 = useRef<HTMLInputElement>(null);
  const text6 = useRef<HTMLInputElement>(null);

  const [captionedImageUrl, setCaptionedImageUrl] = useState('');

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    const response = await fetch(
      `https://api.imgflip.com/caption_image?template_id=${id}&username=BilalMIqbal&password=memex100@&text1=${text1.current?.value}&text2=${text2.current?.value}&text3=${text3.current?.value}`
    );

    const data = await response.json();
    if (data.success) {
      setCaptionedImageUrl(data.data.url); // Set the correct URL of the captioned meme
    } else {
      console.error('Error:', data.error_message);
    }
  };

  return (
    <div className="flex flex-col items-center justify-center min-h-screen bg-gray-100 p-4">
      <h1 className="text-2xl font-bold mb-4">Meme Page</h1>
      <Image
        src={url}
        className="w-[300px] h-[300px] mb-4 rounded-lg shadow-lg"
        height={200}
        width={200}
        alt="meme"
      />
      <form onSubmit={handleSubmit} className="flex flex-col items-center w-full max-w-md">
        <input
          type="text"
          ref={text1}
          placeholder="Text 1"
          className="border rounded-lg p-2 mb-2 w-full"
        />
        <input
          type="text"
          ref={text2}
          placeholder="Text 2"
          className="border rounded-lg p-2 mb-2 w-full"
        />
        {box_count > 2 && (
          <>
            <input
              type="text"
              ref={text3}
              placeholder="Text 3"
              className="border rounded-lg p-2 mb-2 w-full"
            />
          </>
        )}
        {box_count > 3 && (
          <>
            <input
              type="text"
              ref={text4}
              placeholder="Text 4"
              className="border rounded-lg p-2 mb-2 w-full"
            />
          </>
        )}
        {box_count > 4 && (
          <>
            <input
              type="text"
              ref={text5}
              placeholder="Text 5"
              className="border rounded-lg p-2 mb-2 w-full"
            />
          </>
        )}
        {box_count > 5 && (
          <>
            <input
              type="text"
              ref={text6}
              placeholder="Text 6"
              className="border rounded-lg p-2 mb-2 w-full"
            />
          </>
        )}
        <button
          type="submit"
          className="bg-blue-500 text-white font-semibold py-2 px-4 rounded-lg shadow hover:bg-blue-600 transition duration-300"
        >
          Generate Meme
        </button>
      </form>

      {captionedImageUrl && (
        <div className="mt-4">
          <h2 className="text-xl font-semibold mb-2">Captioned Meme:</h2>
          <Image
            src={captionedImageUrl}
            className="w-[300px] h-[300px] rounded-lg shadow-lg"
            height={200}
            width={200}
            alt="captioned meme"
          />
        </div>
      )}
    </div>
  );
}

export default MemePage;


import Image from 'next/image';
import React, { useRef, useState } from 'react';

function MemePage(props: { searchParams: { id: string; url: string; box_count: number } }) {
  const { id, url, box_count } = props.searchParams;

  const text1 = useRef<HTMLInputElement>(null);
  const text2 = useRef<HTMLInputElement>(null);
  const text3 = useRef<HTMLInputElement>(null);
  const text4 = useRef<HTMLInputElement>(null);
  const text5 = useRef<HTMLInputElement>(null);
  const text6 = useRef<HTMLInputElement>(null);

  const [captionedImageUrl, setCaptionedImageUrl] = useState('');

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    const response = await fetch(`https://api.imgflip.com/caption_image?template_id=${id}&username=BilalMIqbal&password=memex100@&text0=${text1.current?.value || ''}&text1=${text2.current?.value || ''}&text2=${text3.current?.value || ''}&text3=${text4.current?.value || ''}&text4=${text5.current?.value || ''}&text5=${text6.current?.value || ''}`);

   

  return (
    <div className="flex flex-col items-center justify-center min-h-screen bg-gray-100 p-4">
      <h1 className="text-2xl font-bold mb-4">Meme Page</h1>
      <Image 
        src={url} 
        className='w-[300px] h-[300px] mb-4 rounded-lg shadow-lg' 
        height={200} 
        width={200} 
        alt="meme"
      />
      <form onSubmit={handleSubmit} className="flex flex-col items-center w-full max-w-md">
        <input 
          type="text" 
          ref={text1}
          placeholder="Text 1" 
          className="border rounded-lg p-2 mb-2 w-full"
        />
        <input 
          type="text"
          ref={text2} 
          placeholder="Text 2" 
          className="border rounded-lg p-2 mb-2 w-full"
        />
        {box_count > 2 && (
          <input 
            type="text" 
            ref={text3}
            placeholder="Text 3" 
            className="border rounded-lg p-2 mb-2 w-full"
          />
        )}
        {box_count > 3 && (
          <input 
            type="text" 
            ref={text4}
            placeholder="Text 4" 
            className="border rounded-lg p-2 mb-2 w-full"
          />
        )}
        {box_count > 4 && (
          <input 
            type="text" 
            ref={text5}
            placeholder="Text 5" 
            className="border rounded-lg p-2 mb-2 w-full"
          />
        )}
        {box_count > 5 && (
          <input 
            type="text" 
            ref={text6}
            placeholder="Text 6" 
            className="border rounded-lg p-2 mb-2 w-full"
          />
        )}
        <button 
          type="submit" 
          className="bg-blue-500 text-white font-semibold py-2 px-4 rounded-lg shadow hover:bg-blue-600 transition duration-300"
        >
          Generate Meme
        </button>
      </form>

      {captionedImageUrl && (
        <div className="mt-4">
          <h2 className="text-xl font-semibold mb-2">Captioned Meme:</h2>
          <Image 
            src={captionedImageUrl} 
            className='w-[300px] h-[300px] rounded-lg shadow-lg' 
            height={200} 
            width={200} 
            alt="captioned meme"
          />
        </div>
      )}
    </div>
  );
}

export default MemePage */
